#!/bin/bash

BUILD=build
BUILD_IMAGE_DIR=${BUILD}/image

mkdir -p  ${BUILD_IMAGE_DIR} ${ARTIFACTS} ${DOWNLOADS}

echo "Downloading u-boot"
curl -fL ${UBOOT_URL} -o ${DOWNLOADS}/u-boot.tar.bz2
tar -C ${BUILD} -xf ${DOWNLOADS}/u-boot.tar.bz2

echo "Downloading initrd"
curl -fL ${INITRD_URL} -o ${DOWNLOADS}/initrd

echo "Downloading kernel vmlinuz"
curl -fL ${KERNEL_URL} -o ${DOWNLOADS}/vmlinuz.gz
pushd ${DOWNLOADS}
gunzip vmlinuz.gz
popd

echo "Downloading RPi firmware"
curl -fL ${RPI_FIRMWARE_URL} -o ${DOWNLOADS}/rpi_firmware.tar.gz
tar -C ${BUILD} -xf ${DOWNLOADS}/rpi_firmware.tar.gz


echo "Rebuilding initrd"
mkdir -p  ${BUILD}/initrd
pushd ${BUILD}/initrd
zcat ${DOWNLOADS}/initrd | cpio -idm
mv *.squashfs ../image/
find | cpio -H newc -o | gzip -9 > ../image/initrd
popd

# build u-boot
pushd ${BUILD}/u-boot-*
CROSS_COMPILE=aarch64-linux-gnu- make rpi_3_defconfig
CROSS_COMPILE=aarch64-linux-gnu- make -j$(nproc)
popd

# construct the image
mkimage -A arm64 -O linux -T script -d assets/rpi3/bootscript.txt ${BUILD_IMAGE_DIR}/boot.scr
cp -v ${BUILD}/u-boot-*/u-boot.bin ${BUILD_IMAGE_DIR}/
cp -v ${DOWNLOADS}/vmlinuz ${BUILD_IMAGE_DIR}/

cp -v ${BUILD}/firmware-*/boot/{bootcode.bin,fixup*.dat,start*.elf} ${BUILD_IMAGE_DIR}/
cp -v ${BUILD}/firmware-*/boot/bcm*-rpi-3-b-plus.dtb ${BUILD_IMAGE_DIR}/
cp -v ${BUILD}/firmware-*/boot/bcm*-rpi-3-b.dtb ${BUILD_IMAGE_DIR}/

mkdir -p ${BUILD_IMAGE_DIR}/overlays/
cp -v ${BUILD}/firmware-*/boot/overlays/*.dtbo ${BUILD_IMAGE_DIR}/overlays/

cp -v assets/rpi3/{cmdline.txt,config.txt} ${BUILD_IMAGE_DIR}/

tree ${BUILD_IMAGE_DIR} -a -L 3
